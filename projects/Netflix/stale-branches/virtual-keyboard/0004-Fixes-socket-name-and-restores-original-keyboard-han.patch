From 50553bbc3a21062c3864e5b1abb893773832a3ec Mon Sep 17 00:00:00 2001
From: Sander van der Maar <s.van.der.maar@metrological.com>
Date: Fri, 1 Apr 2016 14:36:43 +0200
Subject: [PATCH 4/4] Fixes socket name and restores original keyboard handler

---
 .../input/devinput/InputManagerDevInput.cpp   | 19 +++++--------------
 1 file changed, 5 insertions(+), 14 deletions(-)

diff --git a/partner/input/devinput/InputManagerDevInput.cpp b/partner/input/devinput/InputManagerDevInput.cpp
index b0c0eebe..28c91033 100644
--- a/partner/input/devinput/InputManagerDevInput.cpp
+++ b/partner/input/devinput/InputManagerDevInput.cpp
@@ -94,7 +94,7 @@ static inline KeyEvent::Key keyCodeToKey(uint16_t c)
 static const char* ltxt = "\t\t1234567890-=\t\tqwertyuiop[]\t\tasdfghjkl;'`\t\\zxcvbnm,./\t\t\t ";
 static const char* utxt = "\t\t!@#$%^&*()_+\t\tQWERTYUIOP{}\t\tASDFGHJKL:\"~\t|ZXCVBNM<>?\t\t\t ";
 
-static const char * connectorName = "/tmp/keyboardhandler";
+static const char * connectorName = "/tmp/keyhandler";
 
 static inline std::string keyCodeToString(uint16_t code, bool shift)
 {
@@ -136,7 +136,6 @@ void * virtualKeyboardHandle = 0;
 
 void InputManager::init()
 {
-   /*
     shift = false;
 
     const int ret = ::pipe(mPipe);
@@ -144,7 +143,8 @@ void InputManager::init()
     assert(!ret);
 
     rescan();
-    */
+
+   std::cerr << "[netflix virtual-keyboard] Constructing virtual keyboard" << std::endl;
 
    virtualKeyboardHandle = Construct(connectorName, VirtualKeyboardCallback);
    if (virtualKeyboardHandle == 0) {
@@ -154,7 +154,6 @@ void InputManager::init()
 
 void InputManager::cleanup()
 {
-   /*
     close(mPipe[0]);
     close(mPipe[1]);
     for (std::vector<int>::const_iterator it = mDevices.begin(), end = mDevices.end();
@@ -162,13 +161,12 @@ void InputManager::cleanup()
         close(*it);
     }
     mDevices.clear();
-    */
-   Destruct(virtualKeyboardHandle);
+
+    Destruct(virtualKeyboardHandle);
 }
 
 void InputManager::rescan()
 {
-   /*
     for (std::vector<int>::const_iterator it = mDevices.begin(), end = mDevices.end();
          it != end; ++it) {
         printf("closing %d\n", *it);
@@ -210,7 +208,6 @@ void InputManager::rescan()
     }
     free(buf);
     closedir(dir);
-    */
 }
 
 void InputManager::moveMouse(const Point &)
@@ -219,7 +216,6 @@ void InputManager::moveMouse(const Point &)
 
 bool InputManager::handleInput(int fd)
 {
-   /*
     enum { NumEvents = 16 };
 
     input_event ev[NumEvents];
@@ -247,13 +243,11 @@ bool InputManager::handleInput(int fd)
         ++cur;
         rd -= inputSize;
     }
-    */
     return true;
 }
 
 void InputManager::waitForInput(llong mseconds)
 {
-   /*
     int waitUntil = mseconds == -1 ? 0 : mseconds;
 
     struct timeval tv;
@@ -297,14 +291,11 @@ void InputManager::waitForInput(llong mseconds)
         Log::warn(TRACE_GIBBON_INPUT, "InputManagerDevInput, select failure (%d), rescanning", errno);
         rescan();
     }
-    */
 }
 
 void InputManager::wakeup()
 {
-   /*
     write(mPipe[1], " ", 1);
-   */
 }
 
 bool InputManager::hasEvents() const
-- 
2.17.1

