From 6fb149cb31a67202de6ed3cc949ab8f6e207712e Mon Sep 17 00:00:00 2001
From: Bram Oosterhuis <bram.oosterhuis.nl@gmail.com>
Date: Fri, 21 Jul 2017 15:54:38 +0200
Subject: [PATCH 67/97] [graphics] renamed to wpeframework.

---
 ...lient.cmake => FindWaylandEGLClient.cmake} |   6 +-
 .../EffectsGLES2.cpp                          |   0
 .../EffectsGLES2.h                            |   0
 .../GraphicsEngineGLES2.cpp                   |   0
 .../OpenGLContext.cpp                         |   0
 .../OpenGLContext.h                           |   0
 .../OpenGLContextEGL.cpp                      |  12 +-
 .../OpenGLContextEGL.h                        |   6 +-
 .../OpenGLExtensions.h                        |   0
 .../OpenGLFBO.cpp                             |   0
 .../OpenGLFBO.h                               |   0
 .../OpenGLFloats.h                            |   0
 .../OpenGLShaders.h                           |   0
 .../OpenGLState.h                             |   0
 .../ScreenGLES2.cpp                           |   0
 .../SurfaceGLES2.cpp                          |   0
 partner/graphics/wpeframework/display.h       | 103 ++++++++++++++++++
 .../gibbon_graphics.cmake                     |  15 +--
 .../graphics.xml                              |   0
 .../test.cpp                                  |   0
 .../InputManagerWaylandEGL.cpp                |  43 ++++----
 .../gibbon_input.cmake                        |   6 +-
 22 files changed, 147 insertions(+), 44 deletions(-)
 rename netflix/cmake/{FindCompositorClient.cmake => FindWaylandEGLClient.cmake} (88%)
 rename partner/graphics/{compositor-client => wpeframework}/EffectsGLES2.cpp (100%)
 rename partner/graphics/{compositor-client => wpeframework}/EffectsGLES2.h (100%)
 rename partner/graphics/{compositor-client => wpeframework}/GraphicsEngineGLES2.cpp (100%)
 rename partner/graphics/{compositor-client => wpeframework}/OpenGLContext.cpp (100%)
 rename partner/graphics/{compositor-client => wpeframework}/OpenGLContext.h (100%)
 rename partner/graphics/{compositor-client => wpeframework}/OpenGLContextEGL.cpp (91%)
 rename partner/graphics/{compositor-client => wpeframework}/OpenGLContextEGL.h (86%)
 rename partner/graphics/{compositor-client => wpeframework}/OpenGLExtensions.h (100%)
 rename partner/graphics/{compositor-client => wpeframework}/OpenGLFBO.cpp (100%)
 rename partner/graphics/{compositor-client => wpeframework}/OpenGLFBO.h (100%)
 rename partner/graphics/{compositor-client => wpeframework}/OpenGLFloats.h (100%)
 rename partner/graphics/{compositor-client => wpeframework}/OpenGLShaders.h (100%)
 rename partner/graphics/{compositor-client => wpeframework}/OpenGLState.h (100%)
 rename partner/graphics/{compositor-client => wpeframework}/ScreenGLES2.cpp (100%)
 rename partner/graphics/{compositor-client => wpeframework}/SurfaceGLES2.cpp (100%)
 create mode 100644 partner/graphics/wpeframework/display.h
 rename partner/graphics/{compositor-client => wpeframework}/gibbon_graphics.cmake (82%)
 rename partner/graphics/{compositor-client => wpeframework}/graphics.xml (100%)
 rename partner/graphics/{compositor-client => wpeframework}/test.cpp (100%)
 rename partner/input/{compositor-client => wpeframework}/InputManagerWaylandEGL.cpp (83%)
 rename partner/input/{compositor-client => wpeframework}/gibbon_input.cmake (58%)

diff --git a/netflix/cmake/FindCompositorClient.cmake b/netflix/cmake/FindWaylandEGLClient.cmake
similarity index 88%
rename from netflix/cmake/FindCompositorClient.cmake
rename to netflix/cmake/FindWaylandEGLClient.cmake
index 8ad8615b..43d503f7 100644
--- a/netflix/cmake/FindCompositorClient.cmake
+++ b/netflix/cmake/FindWaylandEGLClient.cmake
@@ -29,9 +29,9 @@
 # ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 find_package(PkgConfig)
-pkg_check_modules(COMPOSITOR_CLIENT compositorclient)
+pkg_check_modules(WAYLAND_EGL_CLIENT wayland-egl-client)
 
 include(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(COMPOSITOR_CLIENT DEFAULT_MSG COMPOSITOR_CLIENT_FOUND)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(WAYLAND_EGL_CLIENT DEFAULT_MSG WAYLAND_EGL_CLIENT_FOUND)
 
-mark_as_advanced(COMPOSITOR_CLIENT_INCLUDE_DIRS COMPOSITOR_CLIENT_LIBRARIES)
+mark_as_advanced(WAYLAND_EGL_CLIENT_INCLUDE_DIRS WAYLAND_EGL_CLIENT_LIBRARIES)
diff --git a/partner/graphics/compositor-client/EffectsGLES2.cpp b/partner/graphics/wpeframework/EffectsGLES2.cpp
similarity index 100%
rename from partner/graphics/compositor-client/EffectsGLES2.cpp
rename to partner/graphics/wpeframework/EffectsGLES2.cpp
diff --git a/partner/graphics/compositor-client/EffectsGLES2.h b/partner/graphics/wpeframework/EffectsGLES2.h
similarity index 100%
rename from partner/graphics/compositor-client/EffectsGLES2.h
rename to partner/graphics/wpeframework/EffectsGLES2.h
diff --git a/partner/graphics/compositor-client/GraphicsEngineGLES2.cpp b/partner/graphics/wpeframework/GraphicsEngineGLES2.cpp
similarity index 100%
rename from partner/graphics/compositor-client/GraphicsEngineGLES2.cpp
rename to partner/graphics/wpeframework/GraphicsEngineGLES2.cpp
diff --git a/partner/graphics/compositor-client/OpenGLContext.cpp b/partner/graphics/wpeframework/OpenGLContext.cpp
similarity index 100%
rename from partner/graphics/compositor-client/OpenGLContext.cpp
rename to partner/graphics/wpeframework/OpenGLContext.cpp
diff --git a/partner/graphics/compositor-client/OpenGLContext.h b/partner/graphics/wpeframework/OpenGLContext.h
similarity index 100%
rename from partner/graphics/compositor-client/OpenGLContext.h
rename to partner/graphics/wpeframework/OpenGLContext.h
diff --git a/partner/graphics/compositor-client/OpenGLContextEGL.cpp b/partner/graphics/wpeframework/OpenGLContextEGL.cpp
similarity index 91%
rename from partner/graphics/compositor-client/OpenGLContextEGL.cpp
rename to partner/graphics/wpeframework/OpenGLContextEGL.cpp
index e360008c..3e32142a 100644
--- a/partner/graphics/compositor-client/OpenGLContextEGL.cpp
+++ b/partner/graphics/wpeframework/OpenGLContextEGL.cpp
@@ -57,7 +57,7 @@ bool OpenGLContext::init(OpenGLContext* share)
 {
     mPrivate = new OpenGLContextPrivate;
 
-    assert(mPrivate->display.GetDisplay != EGL_NO_DISPLAY);
+    assert(WPEFramework::Display::Instance().GetDisplay() != EGL_NO_DISPLAY);
 
     mWidth =  mPrivate->client.Width();
     mHeight =  mPrivate->client.Height();
@@ -72,7 +72,7 @@ bool OpenGLContext::init(OpenGLContext* share)
         printf("[Wayland Input] Error creating processor thread\n");
     }
 
-    return mPrivate->display.IsOperational();
+    return WPEFramework::Display::Instance().WaylandDisplay().IsOperational();
 }
 
 void OpenGLContext::cleanup()
@@ -82,8 +82,8 @@ void OpenGLContext::cleanup()
         glDeleteTextures(1, &mPrivate->videoTexture);
     }
 
-    if (mPrivate->display.IsOperational()) {
-        mPrivate->display.Signal();
+    if (WPEFramework::Display::Instance().WaylandDisplay().IsOperational()) {
+        WPEFramework::Display::Instance().WaylandDisplay().Signal();
     }
 
     delete mPrivate;
@@ -105,7 +105,7 @@ void OpenGLContext::flip()
 
 void* OpenGLContext::display()
 {
-    return mPrivate->display.GetDisplay();
+    return  WPEFramework::Display::Instance().WaylandDisplay().GetDisplay();
 }
 
 void* OpenGLContext::createEGLVideoImage(unsigned width, unsigned height)
@@ -127,7 +127,7 @@ void* OpenGLContext::createEGLVideoImage(unsigned width, unsigned height)
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
     GL_CHECK;
 
-    mPrivate->videoImage = mPrivate->display.Create(mPrivate->videoTexture, width, height);
+    mPrivate->videoImage = WPEFramework::Display::Instance().WaylandDisplay().Create(mPrivate->videoTexture, width, height);
     glFinish();
 
     return mPrivate->videoImage.GetImage();
diff --git a/partner/graphics/compositor-client/OpenGLContextEGL.h b/partner/graphics/wpeframework/OpenGLContextEGL.h
similarity index 86%
rename from partner/graphics/compositor-client/OpenGLContextEGL.h
rename to partner/graphics/wpeframework/OpenGLContextEGL.h
index 82435b4b..6f899aac 100644
--- a/partner/graphics/compositor-client/OpenGLContextEGL.h
+++ b/partner/graphics/wpeframework/OpenGLContextEGL.h
@@ -18,7 +18,7 @@
 #include <wayland-egl.h>
 #include <wayland-client-protocol.h>
 
-#include <Client.h>
+#include "display.h"
 #include <nrdbase/ConditionVariable.h>
 #include <nrdbase/Mutex.h>
 
@@ -27,8 +27,7 @@ namespace gibbon {
     class OpenGLContextPrivate {
     public:
         OpenGLContextPrivate()
-            : display(WPEFramework::Wayland::Display::Instance())
-            , client(display.Create("Netflix", 1280, 720))
+            : client(WPEFramework::Display::Instance().Create("Netflix", 1280, 720))
             , videoTexture()
             , videoImage()
             , redraw()
@@ -41,7 +40,6 @@ namespace gibbon {
             redraw.broadcast();
         }
 
-        WPEFramework::Wayland::Display& display;
         WPEFramework::Wayland::Display::Surface client;
         WPEFramework::Wayland::Display::Image videoImage;
         GLuint videoTexture;
diff --git a/partner/graphics/compositor-client/OpenGLExtensions.h b/partner/graphics/wpeframework/OpenGLExtensions.h
similarity index 100%
rename from partner/graphics/compositor-client/OpenGLExtensions.h
rename to partner/graphics/wpeframework/OpenGLExtensions.h
diff --git a/partner/graphics/compositor-client/OpenGLFBO.cpp b/partner/graphics/wpeframework/OpenGLFBO.cpp
similarity index 100%
rename from partner/graphics/compositor-client/OpenGLFBO.cpp
rename to partner/graphics/wpeframework/OpenGLFBO.cpp
diff --git a/partner/graphics/compositor-client/OpenGLFBO.h b/partner/graphics/wpeframework/OpenGLFBO.h
similarity index 100%
rename from partner/graphics/compositor-client/OpenGLFBO.h
rename to partner/graphics/wpeframework/OpenGLFBO.h
diff --git a/partner/graphics/compositor-client/OpenGLFloats.h b/partner/graphics/wpeframework/OpenGLFloats.h
similarity index 100%
rename from partner/graphics/compositor-client/OpenGLFloats.h
rename to partner/graphics/wpeframework/OpenGLFloats.h
diff --git a/partner/graphics/compositor-client/OpenGLShaders.h b/partner/graphics/wpeframework/OpenGLShaders.h
similarity index 100%
rename from partner/graphics/compositor-client/OpenGLShaders.h
rename to partner/graphics/wpeframework/OpenGLShaders.h
diff --git a/partner/graphics/compositor-client/OpenGLState.h b/partner/graphics/wpeframework/OpenGLState.h
similarity index 100%
rename from partner/graphics/compositor-client/OpenGLState.h
rename to partner/graphics/wpeframework/OpenGLState.h
diff --git a/partner/graphics/compositor-client/ScreenGLES2.cpp b/partner/graphics/wpeframework/ScreenGLES2.cpp
similarity index 100%
rename from partner/graphics/compositor-client/ScreenGLES2.cpp
rename to partner/graphics/wpeframework/ScreenGLES2.cpp
diff --git a/partner/graphics/compositor-client/SurfaceGLES2.cpp b/partner/graphics/wpeframework/SurfaceGLES2.cpp
similarity index 100%
rename from partner/graphics/compositor-client/SurfaceGLES2.cpp
rename to partner/graphics/wpeframework/SurfaceGLES2.cpp
diff --git a/partner/graphics/wpeframework/display.h b/partner/graphics/wpeframework/display.h
new file mode 100644
index 00000000..0786138b
--- /dev/null
+++ b/partner/graphics/wpeframework/display.h
@@ -0,0 +1,103 @@
+/*
+ * Copyright (C) 2017 Metrological
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef netflix_wpeframework_display_h
+#define netflix_wpeframework_display_h
+
+#include <wayland/Client.h>
+
+namespace WPEFramework {
+
+class KeyboardHandler : public Wayland::Display::IKeyboard {
+private:
+    KeyboardHandler(const KeyboardHandler&);
+    KeyboardHandler& operator=(const KeyboardHandler&);
+
+public:
+    KeyboardHandler()
+        : _modifiers(0)
+        , _shiftPressed(false)
+    {
+    }
+    virtual ~KeyboardHandler()
+    {
+    }
+
+public:
+    virtual void KeyMap(const char information[], const uint16_t size) /* override */;
+    virtual void Key(const uint32_t key, const IKeyboard::state action, const uint32_t time) /* override */;
+    virtual void Modifiers(uint32_t depressedMods, uint32_t latchedMods, uint32_t lockedMods, uint32_t group) /* override */;
+    virtual void Repeat(int32_t rate, int32_t delay) /* override */;
+
+private:
+    uint32_t _modifiers;
+    bool _shiftPressed;
+};
+
+class Display {
+private:
+    Display(const Display&);
+    Display& operator=(const Display&);
+
+    Display()
+        : _display(WPEFramework::Wayland::Display::Instance())
+        , _keyboardHandler()
+    {
+        _display.InitializeEGL();
+    }
+
+public:
+    ~Display(){};
+
+public:
+    inline static Display& Instance()
+    {
+        static Display waylandDisplay;
+        return waylandDisplay;
+    }
+    inline Wayland::Display::Surface Create(const std::string& name, const uint32_t width, const uint32_t height)
+    {
+        _display.InitializeEGL();
+
+        Wayland::Display::Surface newSurface = _display.Create(name, width, height);
+
+        newSurface.Keyboard(&_keyboardHandler);
+
+        return (newSurface);
+    }
+    inline Wayland::Display& WaylandDisplay()
+    {
+        return _display;
+    };
+
+private:
+    Wayland::Display& _display;
+    KeyboardHandler _keyboardHandler;
+};
+
+} // namespace WPEFramework
+
+#endif // netflix_wpeframework_display_h
diff --git a/partner/graphics/compositor-client/gibbon_graphics.cmake b/partner/graphics/wpeframework/gibbon_graphics.cmake
similarity index 82%
rename from partner/graphics/compositor-client/gibbon_graphics.cmake
rename to partner/graphics/wpeframework/gibbon_graphics.cmake
index 5070621a..eeabf547 100644
--- a/partner/graphics/compositor-client/gibbon_graphics.cmake
+++ b/partner/graphics/wpeframework/gibbon_graphics.cmake
@@ -21,7 +21,7 @@ gibbon_add_sources(
 )
 
 set(GIBBON_GRAPHICS_GL_WSYS "auto")
-if(GIBBON_GRAPHICS STREQUAL "compositor-client")
+if(GIBBON_GRAPHICS STREQUAL "wpeframework")
    set(GIBBON_GRAPHICS_GL_WSYS "egl")
 endif()
 message("    + Using GL: ${GIBBON_GRAPHICS_GL_WSYS}")
@@ -35,12 +35,13 @@ if(GIBBON_GRAPHICS_GL_WSYS STREQUAL "egl")
     gibbon_add_libraries(${WAYLAND_EGL_LIBRARIES})
     gibbon_add_includes(${WAYLAND_EGL_INCLUDE_DIRS})
 
-    find_package(CompositorClient)
-    if (COMPOSITOR_CLIENT_FOUND)
-        message(" -- Build with compositor client support")
-        gibbon_add_libraries(${COMPOSITOR_CLIENT_LIBRARIES})
-        gibbon_add_includes(${COMPOSITOR_CLIENT_INCLUDE_DIRS})
-    endif(COMPOSITOR_CLIENT_FOUND)
+
+    find_package(WaylandEGLClient)
+    if (WAYLAND_EGL_CLIENT_FOUND)
+        message(" -- Build with wayland EGL client abstraction support")
+        gibbon_add_libraries(${WAYLAND_EGL_CLIENT_LIBRARIES})
+        gibbon_add_includes(${WAYLAND_EGL_CLIENT_INCLUDE_DIRS})
+    endif(WAYLAND_EGL_CLIENT_FOUND)
 
     gibbon_add_sources(OpenGLContextEGL.cpp)
 
diff --git a/partner/graphics/compositor-client/graphics.xml b/partner/graphics/wpeframework/graphics.xml
similarity index 100%
rename from partner/graphics/compositor-client/graphics.xml
rename to partner/graphics/wpeframework/graphics.xml
diff --git a/partner/graphics/compositor-client/test.cpp b/partner/graphics/wpeframework/test.cpp
similarity index 100%
rename from partner/graphics/compositor-client/test.cpp
rename to partner/graphics/wpeframework/test.cpp
diff --git a/partner/input/compositor-client/InputManagerWaylandEGL.cpp b/partner/input/wpeframework/InputManagerWaylandEGL.cpp
similarity index 83%
rename from partner/input/compositor-client/InputManagerWaylandEGL.cpp
rename to partner/input/wpeframework/InputManagerWaylandEGL.cpp
index 7acc4d0b..94831a3e 100644
--- a/partner/input/compositor-client/InputManagerWaylandEGL.cpp
+++ b/partner/input/wpeframework/InputManagerWaylandEGL.cpp
@@ -19,7 +19,8 @@
 
 #include <assert.h>
 
-#include <Client.h>
+#include "../../graphics/wpeframework/display.h"
+
 #include <linux/input.h>
 #include <wayland-client-protocol.h>
 
@@ -180,45 +181,45 @@ static inline std::string keyCodeToString(uint16_t code, bool shift)
     return std::string();
 }
 
-static bool shiftPressed = false;
-
-static bool inputHandler(const uint32_t state, const uint32_t code, const uint32_t modifiers)
+/* virtual */ void WPEFramework::KeyboardHandler::KeyMap(const char information[], const uint16_t size)
 {
-    printf("[Wayland Input] Received key,  0X%02X was %s\n", code, state == 0 ? "released" : "pressed");
+}
+/* virtual */ void WPEFramework::KeyboardHandler::Key(const uint32_t code, const IKeyboard::state action, const uint32_t time)
+{
+    printf("Received keycode %d was %s [modifiers 0x%02X]\n", code, action == IKeyboard::released ? "released" : "pressed", _modifiers);
 
     const KeyEvent::Key key = keyCodeToKey(code);
 
-    switch (state) {
-    case WL_KEYBOARD_KEY_STATE_PRESSED:
-        shiftPressed = (key == KeyEvent::GIBBON_KEY_SHIFT ? true : shiftPressed);
+    switch (action) {
+    case IKeyboard::pressed:
+        _shiftPressed = (key == KeyEvent::GIBBON_KEY_SHIFT ? true : _shiftPressed);
         printf("[Wayland Input] Sending key pressed [%d] -> [%d] to Netflix.\n", code, key);
-        GibbonApplication::instance()->sendEvent(new KeyEvent(GibbonEvent::Type_KeyPress, key, keyCodeToString(code, shiftPressed)));
-        GibbonApplication::instance()->getInputManager()->startAutoRepeat(key, keyCodeToString(code, shiftPressed));
+        GibbonApplication::instance()->sendEvent(new KeyEvent(GibbonEvent::Type_KeyPress, key, keyCodeToString(code, _shiftPressed)));
+        GibbonApplication::instance()->getInputManager()->startAutoRepeat(key, keyCodeToString(code, _shiftPressed));
         break;
-    case WL_KEYBOARD_KEY_STATE_RELEASED:
+    case IKeyboard::released:
         GibbonApplication::instance()->getInputManager()->endAutoRepeat();
-        shiftPressed = (key == KeyEvent::GIBBON_KEY_SHIFT ? false : shiftPressed);
+        _shiftPressed = (key == KeyEvent::GIBBON_KEY_SHIFT ? false : _shiftPressed);
         printf("[Wayland Input] Sending key released [%d] -> [%d] to Netflix.\n", code, key);
-        GibbonApplication::instance()->sendEvent(new KeyEvent(GibbonEvent::Type_KeyRelease, key, keyCodeToString(code, shiftPressed)));
+        GibbonApplication::instance()->sendEvent(new KeyEvent(GibbonEvent::Type_KeyRelease, key, keyCodeToString(code, _shiftPressed)));
         break;
     default:;
     }
-
-    return true;
+}
+/* virtual */ void WPEFramework::KeyboardHandler::Modifiers(uint32_t depressedMods, uint32_t latchedMods, uint32_t lockedMods, uint32_t group)
+{
+    _modifiers = 0;
+}
+/* virtual */ void WPEFramework::KeyboardHandler::Repeat(int32_t rate, int32_t delay)
+{
 }
 
 void InputManager::init()
 {
-    WPEFramework::Wayland::Display::Instance().Callback(inputHandler);
 }
 
 void InputManager::cleanup()
 {
-    /*
-    if (WPEFramework::Wayland::Display::Instance().IsOperational()) {
-        WPEFramework::Wayland::Display::Instance().Callback(NULL);
-    }
-    */
 }
 
 void InputManager::moveMouse(const Point&)
diff --git a/partner/input/compositor-client/gibbon_input.cmake b/partner/input/wpeframework/gibbon_input.cmake
similarity index 58%
rename from partner/input/compositor-client/gibbon_input.cmake
rename to partner/input/wpeframework/gibbon_input.cmake
index 87e22cc6..0851e01b 100644
--- a/partner/input/compositor-client/gibbon_input.cmake
+++ b/partner/input/wpeframework/gibbon_input.cmake
@@ -7,9 +7,9 @@
 set(GIBBON_INPUT_NULL TRUE)
 
 find_package(Wayland REQUIRED)
-find_package(CompositorClient REQUIRED)
+find_package(WaylandEGLClient REQUIRED)
 
-gibbon_add_libraries(${WAYLAND_LIBRARIES} ${COMPOSITOR_CLIENT_LIBRARIES})
-gibbon_add_includes(${WAYLAND_INCLUDE_DIRS} ${COMPOSITOR_CLIENT_INCLUDE_DIRS})
+gibbon_add_libraries(${WAYLAND_LIBRARIES} ${WAYLAND_EGL_CLIENT_INCLUDE_LIBRARIES})
+gibbon_add_includes(${WAYLAND_INCLUDE_DIRS} ${WAYLAND_EGL_CLIENT_INCLUDE_DIRS})
 
 gibbon_add_sources(InputManagerWaylandEGL.cpp)
\ No newline at end of file
-- 
2.17.1

