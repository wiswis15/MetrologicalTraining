project(qt_web_inspector)

find_package(Qt5Core REQUIRED)

message(STATUS "Qt5Core_INCLUDE_DIRS =             " ${Qt5Core_INCLUDE_DIRS})
message(STATUS "Qt5Core_DEFINITIONS =              " ${Qt5Core_DEFINITIONS})
message(STATUS "Qt5Core_COMPILE_DEFINITIONS =      " ${Qt5Core_COMPILE_DEFINITIONS})
message(STATUS "Qt5Core_EXECUTABLE_COMPILE_FLAGS = " ${Qt5Core_EXECUTABLE_COMPILE_FLAGS})

set (WPEFRAMEWORK_TEST_QTWEBINSPECTOR_LIBS
   ${CMAKE_THREAD_LIBS_INIT}
   ${CMAKE_DL_LIBS}
   generics
   devices
)

set(WPEFRAMEWORK_TEST_QTWEBINSPECTOR_INCLUDES
    ${WPEFRAMEWORK_GENERICS_INCLUDE_DIR}
    ${WPEFRAMEWORK_DEVICES_INCLUDE_DIR}
    ${Qt5Core_INCLUDE_DIRS})

set(WPEFRAMEWORK_TEST_QTWEBINSPECTOR_SOURCES
    mainwindow.cpp
    main.cpp)

add_executable(${PROJECT_NAME} ${WPEFRAMEWORK_TEST_QTWEBINSPECTOR_SOURCES})
target_include_directories(${PROJECT_NAME} PRIVATE ${WPEFRAMEWORK_TEST_QTWEBINSPECTOR_INCLUDES})
target_compile_options(${PROJECT_NAME} PRIVATE ${Qt5Core_DEFINITIONS} ${Qt5Core_EXECUTABLE_COMPILE_FLAGS})
target_link_libraries(${PROJECT_NAME} ${WPEFRAMEWORK_TEST_QTWEBINSPECTOR_LIBS})

install(TARGETS qt_web_inspector DESTINATION bin)
